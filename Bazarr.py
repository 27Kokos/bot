import asyncio
import json
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===
load_dotenv()

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    config_path = os.path.join(os.path.dirname(__file__), "config.json")
    with open(config_path, "r", encoding="utf-8") as f:
        return json.load(f)

config = load_config()

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton(text="‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
        [InlineKeyboardButton(text="üí¨ –ù–∞—à —á–∞—Ç", url=config["chat_url"])],
        [InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", url=config["review_url"])],
        [InlineKeyboardButton(text="üìç –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è", url=config["map_url"])]
    ])


# /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    file_path = os.path.join(os.path.dirname(__file__), config.get("welcome_image"))
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    if file_path and os.path.exists(file_path):
        photo = FSInputFile(file_path)
        await message.answer_photo(photo, caption=config["welcome_text"], reply_markup=kb)
    else:
        await message.answer(config["welcome_text"], reply_markup=kb)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "main_menu")
async def main_menu(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu_kb())

# –ö–∞—Ç–∞–ª–æ–≥
@dp.callback_query(F.data == "catalog")
async def show_catalog(callback: types.CallbackQuery):
    await callback.message.delete()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await callback.message.answer("üõ† –ö–∞—Ç–∞–ª–æ–≥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º —Ç–æ–≤–∞—Ä—ã!", reply_markup=kb)



# –ö–æ–Ω—Ç–∞–∫—Ç—ã
@dp.callback_query(F.data == "contacts")
async def send_contacts(callback: types.CallbackQuery):
    await callback.message.delete()
    contacts_text = (
        f"üìç *–ê–¥—Ä–µ—Å*: {config['contacts']['address']}\n"
        f"‚òé *–¢–µ–ª–µ—Ñ–æ–Ω*: {config['contacts']['phone']}\n"
        f"üïí *–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã*: {config['contacts']['hours']}"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await callback.message.answer(contacts_text, reply_markup=kb)

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ config.json –Ω–∞ –ª–µ—Ç—É
@dp.message(Command("reload_config"))
async def reload_config(message: types.Message):
    global config
    config = load_config()
    await message.answer("‚ôª –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
